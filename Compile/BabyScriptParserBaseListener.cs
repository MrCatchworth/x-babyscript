//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\Johnny\Documents\programming\XBabyScript\BabyScriptParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace XBabyScript.Compile {

    using XBabyScript.Compile;


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IBabyScriptParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class BabyScriptParserBaseListener : IBabyScriptParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="BabyScriptParser.document"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDocument([NotNull] BabyScriptParser.DocumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BabyScriptParser.document"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDocument([NotNull] BabyScriptParser.DocumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BabyScriptParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpr([NotNull] BabyScriptParser.ExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BabyScriptParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpr([NotNull] BabyScriptParser.ExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BabyScriptParser.exprEof"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprEof([NotNull] BabyScriptParser.ExprEofContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BabyScriptParser.exprEof"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprEof([NotNull] BabyScriptParser.ExprEofContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BabyScriptParser.tableDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTableDef([NotNull] BabyScriptParser.TableDefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BabyScriptParser.tableDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTableDef([NotNull] BabyScriptParser.TableDefContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BabyScriptParser.tableRowDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTableRowDef([NotNull] BabyScriptParser.TableRowDefContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BabyScriptParser.tableRowDef"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTableRowDef([NotNull] BabyScriptParser.TableRowDefContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BabyScriptParser.squareList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSquareList([NotNull] BabyScriptParser.SquareListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BabyScriptParser.squareList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSquareList([NotNull] BabyScriptParser.SquareListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BabyScriptParser.braceList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBraceList([NotNull] BabyScriptParser.BraceListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BabyScriptParser.braceList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBraceList([NotNull] BabyScriptParser.BraceListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BabyScriptParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtom([NotNull] BabyScriptParser.AtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BabyScriptParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtom([NotNull] BabyScriptParser.AtomContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BabyScriptParser.elementName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElementName([NotNull] BabyScriptParser.ElementNameContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BabyScriptParser.elementName"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElementName([NotNull] BabyScriptParser.ElementNameContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Element</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElement([NotNull] BabyScriptParser.ElementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Element</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElement([NotNull] BabyScriptParser.ElementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Assign</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssign([NotNull] BabyScriptParser.AssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Assign</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssign([NotNull] BabyScriptParser.AssignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Increment</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIncrement([NotNull] BabyScriptParser.IncrementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Increment</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIncrement([NotNull] BabyScriptParser.IncrementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Decrement</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDecrement([NotNull] BabyScriptParser.DecrementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Decrement</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDecrement([NotNull] BabyScriptParser.DecrementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AdditionAssign</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditionAssign([NotNull] BabyScriptParser.AdditionAssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AdditionAssign</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditionAssign([NotNull] BabyScriptParser.AdditionAssignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SubtractionAssign</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubtractionAssign([NotNull] BabyScriptParser.SubtractionAssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SubtractionAssign</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubtractionAssign([NotNull] BabyScriptParser.SubtractionAssignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Delete</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDelete([NotNull] BabyScriptParser.DeleteContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Delete</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDelete([NotNull] BabyScriptParser.DeleteContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Text</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterText([NotNull] BabyScriptParser.TextContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Text</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitText([NotNull] BabyScriptParser.TextContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockComment</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockComment([NotNull] BabyScriptParser.BlockCommentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockComment</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockComment([NotNull] BabyScriptParser.BlockCommentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SlashComment</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSlashComment([NotNull] BabyScriptParser.SlashCommentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SlashComment</c>
	/// labeled alternative in <see cref="BabyScriptParser.node"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSlashComment([NotNull] BabyScriptParser.SlashCommentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BabyScriptParser.elementAttributes"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElementAttributes([NotNull] BabyScriptParser.ElementAttributesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BabyScriptParser.elementAttributes"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElementAttributes([NotNull] BabyScriptParser.ElementAttributesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BabyScriptParser.attribute"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAttribute([NotNull] BabyScriptParser.AttributeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BabyScriptParser.attribute"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAttribute([NotNull] BabyScriptParser.AttributeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BabyScriptParser.attributeValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAttributeValue([NotNull] BabyScriptParser.AttributeValueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BabyScriptParser.attributeValue"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAttributeValue([NotNull] BabyScriptParser.AttributeValueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ElementEmptyChildren</c>
	/// labeled alternative in <see cref="BabyScriptParser.elementChildren"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElementEmptyChildren([NotNull] BabyScriptParser.ElementEmptyChildrenContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ElementEmptyChildren</c>
	/// labeled alternative in <see cref="BabyScriptParser.elementChildren"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElementEmptyChildren([NotNull] BabyScriptParser.ElementEmptyChildrenContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ElementChildrenBlock</c>
	/// labeled alternative in <see cref="BabyScriptParser.elementChildren"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterElementChildrenBlock([NotNull] BabyScriptParser.ElementChildrenBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ElementChildrenBlock</c>
	/// labeled alternative in <see cref="BabyScriptParser.elementChildren"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitElementChildrenBlock([NotNull] BabyScriptParser.ElementChildrenBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BabyScriptParser.lookupChain"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLookupChain([NotNull] BabyScriptParser.LookupChainContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BabyScriptParser.lookupChain"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLookupChain([NotNull] BabyScriptParser.LookupChainContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace XBabyScript.Compile
