//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\Johnny\Documents\programming\XRebirthBabyScript.Core\BabyScript.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace XRebirthBabyScript.Compile {

    using System.Linq;
    using System.Text.RegularExpressions;
	using XRebirthBabyScript.Tree;



using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class BabyScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, CLPAREN=12, OPPAREN=13, BLOCK_COMMENT=14, COMMENT=15, 
		WS=16, NUMBER=17, UNITCAST=18, DOUBLE_QUOTE_STRING=19, SINGLE_QUOTE_STRING=20, 
		PLUSPLUS=21, MINUSMINUS=22, PLUS=23, MINUS=24, TIMES=25, DIVIDE=26, MODULO=27, 
		LT=28, LT2=29, LE=30, LE2=31, GT=32, GT2=33, GE=34, GE2=35, EQUAL=36, 
		NEQUAL=37, AND=38, AND2=39, OR=40, OR2=41, NOT=42, TYPEOF=43, SIN=44, 
		COS=45, SQRT=46, IF=47, THEN=48, ELSE=49, TABLE=50, ID=51;
	public const int
		RULE_document = 0, RULE_expr = 1, RULE_exprEof = 2, RULE_tableDef = 3, 
		RULE_tableRowDef = 4, RULE_squareList = 5, RULE_braceList = 6, RULE_atom = 7, 
		RULE_node = 8, RULE_elementAttributes = 9, RULE_attribute = 10, RULE_nodeChildren = 11;
	public static readonly string[] ruleNames = {
		"document", "expr", "exprEof", "tableDef", "tableRowDef", "squareList", 
		"braceList", "atom", "node", "elementAttributes", "attribute", "nodeChildren"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'@'", "'?'", "'.'", "','", "'{'", "'}'", "'='", "';'", 
		"':'", "')'", "'('", null, null, null, null, null, null, null, "'++'", 
		"'--'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", "'lt'", "'<='", "'le'", 
		"'>'", "'gt'", "'>='", "'ge'", "'=='", "'!='", "'&&'", "'and'", "'||'", 
		"'or'", "'not'", "'typeof'", "'sin'", "'cos'", "'sqrt'", "'if'", "'then'", 
		"'else'", "'table'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"CLPAREN", "OPPAREN", "BLOCK_COMMENT", "COMMENT", "WS", "NUMBER", "UNITCAST", 
		"DOUBLE_QUOTE_STRING", "SINGLE_QUOTE_STRING", "PLUSPLUS", "MINUSMINUS", 
		"PLUS", "MINUS", "TIMES", "DIVIDE", "MODULO", "LT", "LT2", "LE", "LE2", 
		"GT", "GT2", "GE", "GE2", "EQUAL", "NEQUAL", "AND", "AND2", "OR", "OR2", 
		"NOT", "TYPEOF", "SIN", "COS", "SQRT", "IF", "THEN", "ELSE", "TABLE", 
		"ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BabyScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BabyScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    private static Regex ElementNameRegex = new Regex("[A-Za-z][a-zA-Z0-9_]*");

	    private bool NextTokenValidId()
	    {
	        IToken nextToken = CurrentToken;
	        return nextToken != null && ElementNameRegex.Match(nextToken.Text).Success;
	    }

		public BabyScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BabyScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DocumentContext : ParserRuleContext {
		public BabyElement root;
		public NodeContext _node;
		public IList<NodeContext> _nodeList = new List<NodeContext>();
		public ITerminalNode Eof() { return GetToken(BabyScriptParser.Eof, 0); }
		public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptVisitor<TResult> typedVisitor = visitor as IBabyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 24; _localctx._node = node();
					_localctx._nodeList.Add(_localctx._node);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 27;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 29; Match(Eof);
			State = 30;
			if (!( _localctx._nodeList.Count(c => c.treeNode is BabyElement) == 1 )) throw new FailedPredicateException(this, " $nodeList.Count(c => c.treeNode is BabyElement) == 1 ");

			            _localctx.root =  (BabyElement)(_localctx._nodeList.First(c => c.treeNode is BabyElement).treeNode);
			        
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public string fullText;
		public ITerminalNode IF() { return GetToken(BabyScriptParser.IF, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(BabyScriptParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(BabyScriptParser.ELSE, 0); }
		public ITerminalNode PLUS() { return GetToken(BabyScriptParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(BabyScriptParser.MINUS, 0); }
		public ITerminalNode TABLE() { return GetToken(BabyScriptParser.TABLE, 0); }
		public TableDefContext tableDef() {
			return GetRuleContext<TableDefContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(BabyScriptParser.NOT, 0); }
		public ITerminalNode TYPEOF() { return GetToken(BabyScriptParser.TYPEOF, 0); }
		public ITerminalNode OPPAREN() { return GetToken(BabyScriptParser.OPPAREN, 0); }
		public ITerminalNode CLPAREN() { return GetToken(BabyScriptParser.CLPAREN, 0); }
		public ITerminalNode SIN() { return GetToken(BabyScriptParser.SIN, 0); }
		public ITerminalNode COS() { return GetToken(BabyScriptParser.COS, 0); }
		public ITerminalNode SQRT() { return GetToken(BabyScriptParser.SQRT, 0); }
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public ITerminalNode TIMES() { return GetToken(BabyScriptParser.TIMES, 0); }
		public ITerminalNode DIVIDE() { return GetToken(BabyScriptParser.DIVIDE, 0); }
		public ITerminalNode MODULO() { return GetToken(BabyScriptParser.MODULO, 0); }
		public ITerminalNode LT() { return GetToken(BabyScriptParser.LT, 0); }
		public ITerminalNode LT2() { return GetToken(BabyScriptParser.LT2, 0); }
		public ITerminalNode LE() { return GetToken(BabyScriptParser.LE, 0); }
		public ITerminalNode LE2() { return GetToken(BabyScriptParser.LE2, 0); }
		public ITerminalNode GT() { return GetToken(BabyScriptParser.GT, 0); }
		public ITerminalNode GT2() { return GetToken(BabyScriptParser.GT2, 0); }
		public ITerminalNode GE() { return GetToken(BabyScriptParser.GE, 0); }
		public ITerminalNode GE2() { return GetToken(BabyScriptParser.GE2, 0); }
		public ITerminalNode EQUAL() { return GetToken(BabyScriptParser.EQUAL, 0); }
		public ITerminalNode NEQUAL() { return GetToken(BabyScriptParser.NEQUAL, 0); }
		public ITerminalNode AND() { return GetToken(BabyScriptParser.AND, 0); }
		public ITerminalNode AND2() { return GetToken(BabyScriptParser.AND2, 0); }
		public ITerminalNode OR() { return GetToken(BabyScriptParser.OR, 0); }
		public ITerminalNode OR2() { return GetToken(BabyScriptParser.OR2, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptVisitor<TResult> typedVisitor = visitor as IBabyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 34; Match(IF);
				State = 35; expr(0);
				State = 36; Match(THEN);
				State = 37; expr(0);
				State = 40;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 38; Match(ELSE);
					State = 39; expr(0);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 42; Match(PLUS);
				State = 43; expr(21);
				}
				break;
			case 3:
				{
				State = 44; Match(MINUS);
				State = 45; expr(20);
				}
				break;
			case 4:
				{
				State = 46; Match(TABLE);
				State = 47; Match(T__0);
				State = 49;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 48; tableDef();
					}
					break;
				}
				State = 51; Match(T__1);
				}
				break;
			case 5:
				{
				State = 52;
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==TYPEOF) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 53; expr(18);
				}
				break;
			case 6:
				{
				State = 54;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SIN) | (1L << COS) | (1L << SQRT))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 55; Match(OPPAREN);
				State = 56; expr(0);
				State = 57; Match(CLPAREN);
				}
				break;
			case 7:
				{
				State = 59; Match(T__2);
				State = 60; expr(3);
				}
				break;
			case 8:
				{
				State = 61; atom();
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 62; Match(T__4);
						State = 63; atom();
						}
						} 
					}
					State = 68;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 114;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 112;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 71;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 72; Match(TIMES);
						State = 73; expr(17);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 74;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 75; Match(DIVIDE);
						State = 76; expr(16);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 77;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 78; Match(MODULO);
						State = 79; expr(15);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 80;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 81; Match(PLUS);
						State = 82; expr(14);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 83;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 84; Match(MINUS);
						State = 85; expr(13);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 86;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 87;
						_la = TokenStream.LA(1);
						if ( !(_la==LT || _la==LT2) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 88; expr(12);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 89;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 90;
						_la = TokenStream.LA(1);
						if ( !(_la==LE || _la==LE2) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 91; expr(11);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 92;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 93;
						_la = TokenStream.LA(1);
						if ( !(_la==GT || _la==GT2) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 94; expr(10);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 95;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 96;
						_la = TokenStream.LA(1);
						if ( !(_la==GE || _la==GE2) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 97; expr(9);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 98;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 99; Match(EQUAL);
						State = 100; expr(8);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 101;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 102; Match(NEQUAL);
						State = 103; expr(7);
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 104;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 105;
						_la = TokenStream.LA(1);
						if ( !(_la==AND || _la==AND2) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 106; expr(6);
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 107;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 108;
						_la = TokenStream.LA(1);
						if ( !(_la==OR || _la==OR2) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 109; expr(5);
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 110;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 111; Match(T__3);
						}
						break;
					}
					} 
				}
				State = 116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
			Context.Stop = TokenStream.LT(-1);

			        ICharStream stream = _localctx.Start.InputStream;
			        _localctx.fullText =  stream.GetText(new Interval(_localctx.Start.StartIndex, _localctx.Stop.StopIndex));
			    
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprEofContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(BabyScriptParser.Eof, 0); }
		public ExprEofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprEof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.EnterExprEof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.ExitExprEof(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptVisitor<TResult> typedVisitor = visitor as IBabyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprEof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprEofContext exprEof() {
		ExprEofContext _localctx = new ExprEofContext(Context, State);
		EnterRule(_localctx, 4, RULE_exprEof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; expr(0);
			State = 118; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDefContext : ParserRuleContext {
		public TableRowDefContext[] tableRowDef() {
			return GetRuleContexts<TableRowDefContext>();
		}
		public TableRowDefContext tableRowDef(int i) {
			return GetRuleContext<TableRowDefContext>(i);
		}
		public TableDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.EnterTableDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.ExitTableDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptVisitor<TResult> typedVisitor = visitor as IBabyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDefContext tableDef() {
		TableDefContext _localctx = new TableDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_tableDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; tableRowDef();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 121; Match(T__5);
				State = 122; tableRowDef();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRowDefContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ID() { return GetToken(BabyScriptParser.ID, 0); }
		public TableRowDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRowDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.EnterTableRowDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.ExitTableRowDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptVisitor<TResult> typedVisitor = visitor as IBabyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRowDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowDefContext tableRowDef() {
		TableRowDefContext _localctx = new TableRowDefContext(Context, State);
		EnterRule(_localctx, 8, RULE_tableRowDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 128;
				if (!(CurrentToken.Text[0] == '$')) throw new FailedPredicateException(this, "CurrentToken.Text[0] == '$'");
				State = 129; Match(ID);
				}
				break;
			case 2:
				{
				State = 130; Match(T__6);
				State = 131; expr(0);
				State = 132; Match(T__7);
				}
				break;
			}
			State = 136; Match(T__8);
			State = 137; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareListContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SquareListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.EnterSquareList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.ExitSquareList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptVisitor<TResult> typedVisitor = visitor as IBabyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquareList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareListContext squareList() {
		SquareListContext _localctx = new SquareListContext(Context, State);
		EnterRule(_localctx, 10, RULE_squareList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(T__0);
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 140; expr(0);
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 141; Match(T__5);
					State = 142; expr(0);
					}
					}
					State = 147;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 150; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceListContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public BraceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.EnterBraceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.ExitBraceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptVisitor<TResult> typedVisitor = visitor as IBabyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BraceListContext braceList() {
		BraceListContext _localctx = new BraceListContext(Context, State);
		EnterRule(_localctx, 12, RULE_braceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(T__6);
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 153; expr(0);
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5) {
					{
					{
					State = 154; Match(T__5);
					State = 155; expr(0);
					}
					}
					State = 160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 163; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(BabyScriptParser.NUMBER, 0); }
		public ITerminalNode SINGLE_QUOTE_STRING() { return GetToken(BabyScriptParser.SINGLE_QUOTE_STRING, 0); }
		public SquareListContext squareList() {
			return GetRuleContext<SquareListContext>(0);
		}
		public BraceListContext braceList() {
			return GetRuleContext<BraceListContext>(0);
		}
		public ITerminalNode OPPAREN() { return GetToken(BabyScriptParser.OPPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLPAREN() { return GetToken(BabyScriptParser.CLPAREN, 0); }
		public ITerminalNode UNITCAST() { return GetToken(BabyScriptParser.UNITCAST, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptVisitor<TResult> typedVisitor = visitor as IBabyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 14, RULE_atom);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165; Match(NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166; Match(SINGLE_QUOTE_STRING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 167; squareList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 168; braceList();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 169; Match(OPPAREN);
				State = 170; expr(0);
				State = 171; Match(CLPAREN);
				State = 173;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 172; Match(UNITCAST);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				NextTokenValidId();
				State = 176;
				MatchWildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		public BabyNode treeNode;
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
	 
		public NodeContext() { }
		public virtual void CopyFrom(NodeContext context) {
			base.CopyFrom(context);
			this.treeNode = context.treeNode;
		}
	}
	public partial class CommentContext : NodeContext {
		public IToken _BLOCK_COMMENT;
		public ITerminalNode BLOCK_COMMENT() { return GetToken(BabyScriptParser.BLOCK_COMMENT, 0); }
		public CommentContext(NodeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptVisitor<TResult> typedVisitor = visitor as IBabyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementContext : NodeContext {
		public IToken eleName;
		public ElementAttributesContext _elementAttributes;
		public NodeChildrenContext _nodeChildren;
		public ExprContext leftHand;
		public ExprContext rightHand;
		public ElementAttributesContext elementAttributes() {
			return GetRuleContext<ElementAttributesContext>(0);
		}
		public NodeChildrenContext nodeChildren() {
			return GetRuleContext<NodeChildrenContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUSPLUS() { return GetToken(BabyScriptParser.PLUSPLUS, 0); }
		public ITerminalNode MINUSMINUS() { return GetToken(BabyScriptParser.MINUSMINUS, 0); }
		public ElementContext(NodeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptVisitor<TResult> typedVisitor = visitor as IBabyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 16, RULE_node);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new ElementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 179;
				if (!(NextTokenValidId())) throw new FailedPredicateException(this, "NextTokenValidId()");
				State = 180;
				((ElementContext)_localctx).eleName = MatchWildcard();
				State = 181; ((ElementContext)_localctx)._elementAttributes = elementAttributes();
				State = 182; ((ElementContext)_localctx)._nodeChildren = nodeChildren();

				            ((ElementContext)_localctx).treeNode =  new BabyElement((((ElementContext)_localctx).eleName!=null?((ElementContext)_localctx).eleName.Text:null), ((ElementContext)_localctx)._elementAttributes.attrs, ((ElementContext)_localctx)._nodeChildren.nodes);
				        
				}
				break;
			case 2:
				_localctx = new ElementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 185; ((ElementContext)_localctx).leftHand = expr(0);
				State = 186; Match(T__8);
				State = 187; ((ElementContext)_localctx).rightHand = expr(0);
				State = 188; Match(T__9);

				            ((ElementContext)_localctx).treeNode =  BabyElement.CreateAssignment(((ElementContext)_localctx).leftHand.fullText, ((ElementContext)_localctx).rightHand.fullText);
				        
				}
				break;
			case 3:
				_localctx = new ElementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 191; ((ElementContext)_localctx).leftHand = expr(0);
				State = 192; Match(PLUSPLUS);

				            ((ElementContext)_localctx).treeNode =  BabyElement.CreateIncrement(((ElementContext)_localctx).leftHand.fullText);
				        
				}
				break;
			case 4:
				_localctx = new ElementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 195; ((ElementContext)_localctx).leftHand = expr(0);
				State = 196; Match(MINUSMINUS);

				            ((ElementContext)_localctx).treeNode =  BabyElement.CreateDecrement(((ElementContext)_localctx).leftHand.fullText);
				        
				}
				break;
			case 5:
				_localctx = new CommentContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 199; ((CommentContext)_localctx)._BLOCK_COMMENT = Match(BLOCK_COMMENT);

							((CommentContext)_localctx).treeNode =  new BabyComment((((CommentContext)_localctx)._BLOCK_COMMENT!=null?((CommentContext)_localctx)._BLOCK_COMMENT.Text:null).Substring(2, (((CommentContext)_localctx)._BLOCK_COMMENT!=null?((CommentContext)_localctx)._BLOCK_COMMENT.Text:null).Length-4));
						
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementAttributesContext : ParserRuleContext {
		public BabyAttribute[] attrs;
		public AttributeContext _attribute;
		public IList<AttributeContext> _rawList = new List<AttributeContext>();
		public ITerminalNode OPPAREN() { return GetToken(BabyScriptParser.OPPAREN, 0); }
		public ITerminalNode CLPAREN() { return GetToken(BabyScriptParser.CLPAREN, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ElementAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.EnterElementAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.ExitElementAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptVisitor<TResult> typedVisitor = visitor as IBabyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementAttributesContext elementAttributes() {
		ElementAttributesContext _localctx = new ElementAttributesContext(Context, State);
		EnterRule(_localctx, 18, RULE_elementAttributes);
		int _la;
		try {
			State = 217;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203; Match(OPPAREN);
				State = 212;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 204; _localctx._attribute = attribute();
					_localctx._rawList.Add(_localctx._attribute);
					State = 209;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__5) {
						{
						{
						State = 205; Match(T__5);
						State = 206; _localctx._attribute = attribute();
						_localctx._rawList.Add(_localctx._attribute);
						}
						}
						State = 211;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 214; Match(CLPAREN);

				            _localctx.attrs =  _localctx._rawList.Select(a => a.attr).ToArray();
				        
				}
				break;
			case T__6:
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{

				            _localctx.attrs =  new BabyAttribute[0];
				        
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public BabyAttribute attr;
		public IToken attrName;
		public IToken _DOUBLE_QUOTE_STRING;
		public ExprContext _expr;
		public ITerminalNode DOUBLE_QUOTE_STRING() { return GetToken(BabyScriptParser.DOUBLE_QUOTE_STRING, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptVisitor<TResult> typedVisitor = visitor as IBabyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 20, RULE_attribute);
		try {
			State = 235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				if (!(NextTokenValidId())) throw new FailedPredicateException(this, "NextTokenValidId()");
				State = 220;
				_localctx.attrName = MatchWildcard();
				State = 221; Match(T__10);
				State = 222; _localctx._DOUBLE_QUOTE_STRING = Match(DOUBLE_QUOTE_STRING);

				            _localctx.attr =  new BabyAttribute((_localctx.attrName!=null?_localctx.attrName.Text:null), (_localctx._DOUBLE_QUOTE_STRING!=null?_localctx._DOUBLE_QUOTE_STRING.Text:null));
				        
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 224;
				if (!(NextTokenValidId())) throw new FailedPredicateException(this, "NextTokenValidId()");
				State = 225;
				_localctx.attrName = MatchWildcard();
				State = 226; Match(T__10);
				State = 227; _localctx._expr = expr(0);

				            _localctx.attr =  new BabyAttribute((_localctx.attrName!=null?_localctx.attrName.Text:null), _localctx._expr.fullText);
				        
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 230; _localctx._expr = expr(0);

				            //Console.WriteLine("Found an anonymous attribute: {0}", _localctx._expr.fullText);
				            _localctx.attr =  new BabyAttribute(null, _localctx._expr.fullText);
				        
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 233; _localctx._DOUBLE_QUOTE_STRING = Match(DOUBLE_QUOTE_STRING);

							_localctx.attr =  new BabyAttribute(null, (_localctx._DOUBLE_QUOTE_STRING!=null?_localctx._DOUBLE_QUOTE_STRING.Text:null));
						
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeChildrenContext : ParserRuleContext {
		public BabyNode[] nodes;
		public NodeContext _node;
		public IList<NodeContext> _rawList = new List<NodeContext>();
		public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		public NodeChildrenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeChildren; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.EnterNodeChildren(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptListener typedListener = listener as IBabyScriptListener;
			if (typedListener != null) typedListener.ExitNodeChildren(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptVisitor<TResult> typedVisitor = visitor as IBabyScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNodeChildren(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeChildrenContext nodeChildren() {
		NodeChildrenContext _localctx = new NodeChildrenContext(Context, State);
		EnterRule(_localctx, 22, RULE_nodeChildren);
		try {
			int _alt;
			State = 248;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237; Match(T__9);

				            _localctx.nodes =  new BabyNode[0];
				        
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 239; Match(T__6);
				State = 243;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 240; _localctx._node = node();
						_localctx._rawList.Add(_localctx._node);
						}
						} 
					}
					State = 245;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				}
				State = 246; Match(T__7);

				            _localctx.nodes =  _localctx._rawList.Select(n => n.treeNode).ToArray();
				        
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return document_sempred((DocumentContext)_localctx, predIndex);
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		case 4: return tableRowDef_sempred((TableRowDefContext)_localctx, predIndex);
		case 8: return node_sempred((NodeContext)_localctx, predIndex);
		case 10: return attribute_sempred((AttributeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool document_sempred(DocumentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return  _localctx._nodeList.Count(c => c.treeNode is BabyElement) == 1 ;
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 16);
		case 2: return Precpred(Context, 15);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 8);
		case 10: return Precpred(Context, 7);
		case 11: return Precpred(Context, 6);
		case 12: return Precpred(Context, 5);
		case 13: return Precpred(Context, 4);
		case 14: return Precpred(Context, 2);
		}
		return true;
	}
	private bool tableRowDef_sempred(TableRowDefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return CurrentToken.Text[0] == '$';
		}
		return true;
	}
	private bool node_sempred(NodeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return NextTokenValidId();
		}
		return true;
	}
	private bool attribute_sempred(AttributeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return NextTokenValidId();
		case 18: return NextTokenValidId();
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x35', '\xFD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x6', 
		'\x2', '\x1C', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x1D', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '+', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x34', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', '\x43', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x46', '\v', 
		'\x3', '\x5', '\x3', 'H', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 's', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', 'v', '\v', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'~', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x81', '\v', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '\x89', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', '\x92', '\n', '\a', '\f', '\a', '\xE', '\a', '\x95', '\v', '\a', 
		'\x5', '\a', '\x97', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x9F', '\n', '\b', 
		'\f', '\b', '\xE', '\b', '\xA2', '\v', '\b', '\x5', '\b', '\xA4', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\xB0', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB4', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\xCC', '\n', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\xD2', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\xD5', '\v', '\v', '\x5', '\v', '\xD7', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xDC', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\xEE', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\xF4', '\n', '\r', '\f', '\r', '\xE', '\r', '\xF7', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xFB', '\n', '\r', '\x3', 
		'\r', '\x2', '\x3', '\x4', '\xE', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x2', '\n', '\x3', '\x2', 
		',', '-', '\x3', '\x2', '.', '\x30', '\x3', '\x2', '\x1E', '\x1F', '\x3', 
		'\x2', ' ', '!', '\x3', '\x2', '\"', '#', '\x3', '\x2', '$', '%', '\x3', 
		'\x2', '(', ')', '\x3', '\x2', '*', '+', '\x2', '\x121', '\x2', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x4', 'G', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'w', '\x3', '\x2', '\x2', '\x2', '\b', 'z', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x88', '\x3', '\x2', '\x2', '\x2', '\f', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x10', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x16', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1C', 
		'\x5', '\x12', '\n', '\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\x2', '\x2', '\x3', ' ', 
		'!', '\x6', '\x2', '\x2', '\x3', '!', '\"', '\b', '\x2', '\x1', '\x2', 
		'\"', '\x3', '\x3', '\x2', '\x2', '\x2', '#', '$', '\b', '\x3', '\x1', 
		'\x2', '$', '%', '\a', '\x31', '\x2', '\x2', '%', '&', '\x5', '\x4', '\x3', 
		'\x2', '&', '\'', '\a', '\x32', '\x2', '\x2', '\'', '*', '\x5', '\x4', 
		'\x3', '\x2', '(', ')', '\a', '\x33', '\x2', '\x2', ')', '+', '\x5', '\x4', 
		'\x3', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', 
		'\x2', '\x2', '+', 'H', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', '\x19', 
		'\x2', '\x2', '-', 'H', '\x5', '\x4', '\x3', '\x17', '.', '/', '\a', '\x1A', 
		'\x2', '\x2', '/', 'H', '\x5', '\x4', '\x3', '\x16', '\x30', '\x31', '\a', 
		'\x34', '\x2', '\x2', '\x31', '\x33', '\a', '\x3', '\x2', '\x2', '\x32', 
		'\x34', '\x5', '\b', '\x5', '\x2', '\x33', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x35', 'H', '\a', '\x4', '\x2', '\x2', '\x36', '\x37', 
		'\t', '\x2', '\x2', '\x2', '\x37', 'H', '\x5', '\x4', '\x3', '\x14', '\x38', 
		'\x39', '\t', '\x3', '\x2', '\x2', '\x39', ':', '\a', '\xF', '\x2', '\x2', 
		':', ';', '\x5', '\x4', '\x3', '\x2', ';', '<', '\a', '\xE', '\x2', '\x2', 
		'<', 'H', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\x5', '\x2', '\x2', 
		'>', 'H', '\x5', '\x4', '\x3', '\x5', '?', '\x44', '\x5', '\x10', '\t', 
		'\x2', '@', '\x41', '\a', '\a', '\x2', '\x2', '\x41', '\x43', '\x5', '\x10', 
		'\t', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x43', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', '#', '\x3', 
		'\x2', '\x2', '\x2', 'G', ',', '\x3', '\x2', '\x2', '\x2', 'G', '.', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\x30', '\x3', '\x2', '\x2', '\x2', 'G', '\x36', 
		'\x3', '\x2', '\x2', '\x2', 'G', '\x38', '\x3', '\x2', '\x2', '\x2', 'G', 
		'=', '\x3', '\x2', '\x2', '\x2', 'G', '?', '\x3', '\x2', '\x2', '\x2', 
		'H', 't', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\f', '\x12', '\x2', '\x2', 
		'J', 'K', '\a', '\x1B', '\x2', '\x2', 'K', 's', '\x5', '\x4', '\x3', '\x13', 
		'L', 'M', '\f', '\x11', '\x2', '\x2', 'M', 'N', '\a', '\x1C', '\x2', '\x2', 
		'N', 's', '\x5', '\x4', '\x3', '\x12', 'O', 'P', '\f', '\x10', '\x2', 
		'\x2', 'P', 'Q', '\a', '\x1D', '\x2', '\x2', 'Q', 's', '\x5', '\x4', '\x3', 
		'\x11', 'R', 'S', '\f', '\xF', '\x2', '\x2', 'S', 'T', '\a', '\x19', '\x2', 
		'\x2', 'T', 's', '\x5', '\x4', '\x3', '\x10', 'U', 'V', '\f', '\xE', '\x2', 
		'\x2', 'V', 'W', '\a', '\x1A', '\x2', '\x2', 'W', 's', '\x5', '\x4', '\x3', 
		'\xF', 'X', 'Y', '\f', '\r', '\x2', '\x2', 'Y', 'Z', '\t', '\x4', '\x2', 
		'\x2', 'Z', 's', '\x5', '\x4', '\x3', '\xE', '[', '\\', '\f', '\f', '\x2', 
		'\x2', '\\', ']', '\t', '\x5', '\x2', '\x2', ']', 's', '\x5', '\x4', '\x3', 
		'\r', '^', '_', '\f', '\v', '\x2', '\x2', '_', '`', '\t', '\x6', '\x2', 
		'\x2', '`', 's', '\x5', '\x4', '\x3', '\f', '\x61', '\x62', '\f', '\n', 
		'\x2', '\x2', '\x62', '\x63', '\t', '\a', '\x2', '\x2', '\x63', 's', '\x5', 
		'\x4', '\x3', '\v', '\x64', '\x65', '\f', '\t', '\x2', '\x2', '\x65', 
		'\x66', '\a', '&', '\x2', '\x2', '\x66', 's', '\x5', '\x4', '\x3', '\n', 
		'g', 'h', '\f', '\b', '\x2', '\x2', 'h', 'i', '\a', '\'', '\x2', '\x2', 
		'i', 's', '\x5', '\x4', '\x3', '\t', 'j', 'k', '\f', '\a', '\x2', '\x2', 
		'k', 'l', '\t', '\b', '\x2', '\x2', 'l', 's', '\x5', '\x4', '\x3', '\b', 
		'm', 'n', '\f', '\x6', '\x2', '\x2', 'n', 'o', '\t', '\t', '\x2', '\x2', 
		'o', 's', '\x5', '\x4', '\x3', '\a', 'p', 'q', '\f', '\x4', '\x2', '\x2', 
		'q', 's', '\a', '\x6', '\x2', '\x2', 'r', 'I', '\x3', '\x2', '\x2', '\x2', 
		'r', 'L', '\x3', '\x2', '\x2', '\x2', 'r', 'O', '\x3', '\x2', '\x2', '\x2', 
		'r', 'R', '\x3', '\x2', '\x2', '\x2', 'r', 'U', '\x3', '\x2', '\x2', '\x2', 
		'r', 'X', '\x3', '\x2', '\x2', '\x2', 'r', '[', '\x3', '\x2', '\x2', '\x2', 
		'r', '^', '\x3', '\x2', '\x2', '\x2', 'r', '\x61', '\x3', '\x2', '\x2', 
		'\x2', 'r', '\x64', '\x3', '\x2', '\x2', '\x2', 'r', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'j', '\x3', '\x2', '\x2', '\x2', 'r', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 's', 'v', '\x3', '\x2', 
		'\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'u', '\x5', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', 
		'\x2', '\x2', '\x2', 'w', 'x', '\x5', '\x4', '\x3', '\x2', 'x', 'y', '\a', 
		'\x2', '\x2', '\x3', 'y', '\a', '\x3', '\x2', '\x2', '\x2', 'z', '\x7F', 
		'\x5', '\n', '\x6', '\x2', '{', '|', '\a', '\b', '\x2', '\x2', '|', '~', 
		'\x5', '\n', '\x6', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '~', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x83', '\x6', '\x6', '\x11', '\x2', '\x83', '\x89', '\a', '\x35', '\x2', 
		'\x2', '\x84', '\x85', '\a', '\t', '\x2', '\x2', '\x85', '\x86', '\x5', 
		'\x4', '\x3', '\x2', '\x86', '\x87', '\a', '\n', '\x2', '\x2', '\x87', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x88', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x84', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '\v', '\x2', '\x2', '\x8B', 
		'\x8C', '\x5', '\x4', '\x3', '\x2', '\x8C', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x96', '\a', '\x3', '\x2', '\x2', '\x8E', '\x93', '\x5', 
		'\x4', '\x3', '\x2', '\x8F', '\x90', '\a', '\b', '\x2', '\x2', '\x90', 
		'\x92', '\x5', '\x4', '\x3', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x95', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x99', '\a', '\x4', '\x2', '\x2', '\x99', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\xA3', '\a', '\t', '\x2', '\x2', '\x9B', '\xA0', '\x5', 
		'\x4', '\x3', '\x2', '\x9C', '\x9D', '\a', '\b', '\x2', '\x2', '\x9D', 
		'\x9F', '\x5', '\x4', '\x3', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\a', '\n', '\x2', '\x2', '\xA6', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xB4', '\a', '\x13', '\x2', '\x2', '\xA8', '\xB4', '\a', 
		'\x16', '\x2', '\x2', '\xA9', '\xB4', '\x5', '\f', '\a', '\x2', '\xAA', 
		'\xB4', '\x5', '\xE', '\b', '\x2', '\xAB', '\xAC', '\a', '\xF', '\x2', 
		'\x2', '\xAC', '\xAD', '\x5', '\x4', '\x3', '\x2', '\xAD', '\xAF', '\a', 
		'\xE', '\x2', '\x2', '\xAE', '\xB0', '\a', '\x14', '\x2', '\x2', '\xAF', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\b', 
		'\t', '\x1', '\x2', '\xB2', '\xB4', '\v', '\x2', '\x2', '\x2', '\xB3', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB6', '\x6', '\n', '\x12', '\x2', '\xB6', '\xB7', '\v', 
		'\x2', '\x2', '\x2', '\xB7', '\xB8', '\x5', '\x14', '\v', '\x2', '\xB8', 
		'\xB9', '\x5', '\x18', '\r', '\x2', '\xB9', '\xBA', '\b', '\n', '\x1', 
		'\x2', '\xBA', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x5', 
		'\x4', '\x3', '\x2', '\xBC', '\xBD', '\a', '\v', '\x2', '\x2', '\xBD', 
		'\xBE', '\x5', '\x4', '\x3', '\x2', '\xBE', '\xBF', '\a', '\f', '\x2', 
		'\x2', '\xBF', '\xC0', '\b', '\n', '\x1', '\x2', '\xC0', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC2', '\x5', '\x4', '\x3', '\x2', '\xC2', 
		'\xC3', '\a', '\x17', '\x2', '\x2', '\xC3', '\xC4', '\b', '\n', '\x1', 
		'\x2', '\xC4', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x5', 
		'\x4', '\x3', '\x2', '\xC6', '\xC7', '\a', '\x18', '\x2', '\x2', '\xC7', 
		'\xC8', '\b', '\n', '\x1', '\x2', '\xC8', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xCA', '\a', '\x10', '\x2', '\x2', '\xCA', '\xCC', '\b', 
		'\n', '\x1', '\x2', '\xCB', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\x13', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xD6', '\a', '\xF', '\x2', '\x2', '\xCE', '\xD3', '\x5', '\x16', '\f', 
		'\x2', '\xCF', '\xD0', '\a', '\b', '\x2', '\x2', '\xD0', '\xD2', '\x5', 
		'\x16', '\f', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xCE', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', 
		'\xE', '\x2', '\x2', '\xD9', '\xDC', '\b', '\v', '\x1', '\x2', '\xDA', 
		'\xDC', '\b', '\v', '\x1', '\x2', '\xDB', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDE', '\x6', '\f', '\x13', '\x2', '\xDE', 
		'\xDF', '\v', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\a', '\r', '\x2', 
		'\x2', '\xE0', '\xE1', '\a', '\x15', '\x2', '\x2', '\xE1', '\xEE', '\b', 
		'\f', '\x1', '\x2', '\xE2', '\xE3', '\x6', '\f', '\x14', '\x2', '\xE3', 
		'\xE4', '\v', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\r', '\x2', 
		'\x2', '\xE5', '\xE6', '\x5', '\x4', '\x3', '\x2', '\xE6', '\xE7', '\b', 
		'\f', '\x1', '\x2', '\xE7', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xE9', '\x5', '\x4', '\x3', '\x2', '\xE9', '\xEA', '\b', '\f', '\x1', 
		'\x2', '\xEA', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\a', 
		'\x15', '\x2', '\x2', '\xEC', '\xEE', '\b', '\f', '\x1', '\x2', '\xED', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xED', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\x17', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF0', '\a', '\f', '\x2', '\x2', '\xF0', '\xFB', '\b', '\r', '\x1', '\x2', 
		'\xF1', '\xF5', '\a', '\t', '\x2', '\x2', '\xF2', '\xF4', '\x5', '\x12', 
		'\n', '\x2', '\xF3', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF7', 
		'\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF8', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', 
		'\a', '\n', '\x2', '\x2', '\xF9', '\xFB', '\b', '\r', '\x1', '\x2', '\xFA', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\x19', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1D', '*', 
		'\x33', '\x44', 'G', 'r', 't', '\x7F', '\x88', '\x93', '\x96', '\xA0', 
		'\xA3', '\xAF', '\xB3', '\xCB', '\xD3', '\xD6', '\xDB', '\xED', '\xF5', 
		'\xFA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace XRebirthBabyScript.Compile
