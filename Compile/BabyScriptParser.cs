//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\Johnny\Documents\programming\XBabyScript\BabyScriptParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace XBabyScript.Compile {

    using XBabyScript.Compile;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class BabyScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPPAREN=1, CLPAREN=2, OPBRACKET=3, CLBRACKET=4, OPBRACE=5, CLBRACE=6, 
		BLOCK_COMMENT=7, SLASH_COMMENT=8, LINE_BREAK=9, WS=10, PLUSPLUS=11, MINUSMINUS=12, 
		PLUSEQUALS=13, MINUSEQUALS=14, EQUALS=15, SEMICOLON=16, PLUS=17, MINUS=18, 
		TIMES=19, DIVIDE=20, MODULO=21, LT=22, LT2=23, LE=24, LE2=25, GT=26, GT2=27, 
		GE=28, GE2=29, EQUAL=30, NEQUAL=31, AND=32, OR=33, COLON=34, COMMA=35, 
		DOT=36, QUESTIONMARK=37, AT=38, HAT=39, NUMBER=40, UNITCAST=41, NOT=42, 
		TYPEOF=43, SIN=44, COS=45, SQRT=46, IF=47, THEN=48, ELSE=49, TABLE=50, 
		DELETE=51, ID=52, DOUBLE_QUOTE_STRING=53, SINGLE_QUOTE_STRING=54;
	public const int
		RULE_document = 0, RULE_expr = 1, RULE_exprEof = 2, RULE_tableDef = 3, 
		RULE_tableRowDef = 4, RULE_squareList = 5, RULE_braceList = 6, RULE_atom = 7, 
		RULE_elementName = 8, RULE_node = 9, RULE_elementAttributes = 10, RULE_attribute = 11, 
		RULE_attributeValue = 12, RULE_elementChildren = 13, RULE_lookupChain = 14;
	public static readonly string[] ruleNames = {
		"document", "expr", "exprEof", "tableDef", "tableRowDef", "squareList", 
		"braceList", "atom", "elementName", "node", "elementAttributes", "attribute", 
		"attributeValue", "elementChildren", "lookupChain"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'['", "']'", "'{'", "'}'", null, null, null, null, 
		"'++'", "'--'", "'+='", "'-='", "'='", "';'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'<'", "'lt'", "'<='", "'le'", "'>'", "'gt'", "'>='", "'ge'", "'=='", 
		"'!='", "'and'", "'or'", "':'", "','", "'.'", "'?'", "'@'", "'^'", null, 
		null, "'not'", "'typeof'", "'sin'", "'cos'", "'sqrt'", "'if'", "'then'", 
		"'else'", "'table'", "'delete'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPPAREN", "CLPAREN", "OPBRACKET", "CLBRACKET", "OPBRACE", "CLBRACE", 
		"BLOCK_COMMENT", "SLASH_COMMENT", "LINE_BREAK", "WS", "PLUSPLUS", "MINUSMINUS", 
		"PLUSEQUALS", "MINUSEQUALS", "EQUALS", "SEMICOLON", "PLUS", "MINUS", "TIMES", 
		"DIVIDE", "MODULO", "LT", "LT2", "LE", "LE2", "GT", "GT2", "GE", "GE2", 
		"EQUAL", "NEQUAL", "AND", "OR", "COLON", "COMMA", "DOT", "QUESTIONMARK", 
		"AT", "HAT", "NUMBER", "UNITCAST", "NOT", "TYPEOF", "SIN", "COS", "SQRT", 
		"IF", "THEN", "ELSE", "TABLE", "DELETE", "ID", "DOUBLE_QUOTE_STRING", 
		"SINGLE_QUOTE_STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BabyScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BabyScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BabyScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BabyScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DocumentContext : ParserRuleContext {
		public NodeContext _node;
		public IList<NodeContext> _nodeList = new List<NodeContext>();
		public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 30; _localctx._node = node();
					_localctx._nodeList.Add(_localctx._node);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 33;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(BabyScriptParser.IF, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(BabyScriptParser.THEN, 0); }
		public ITerminalNode ELSE() { return GetToken(BabyScriptParser.ELSE, 0); }
		public ITerminalNode PLUS() { return GetToken(BabyScriptParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(BabyScriptParser.MINUS, 0); }
		public ITerminalNode TABLE() { return GetToken(BabyScriptParser.TABLE, 0); }
		public ITerminalNode OPBRACKET() { return GetToken(BabyScriptParser.OPBRACKET, 0); }
		public ITerminalNode CLBRACKET() { return GetToken(BabyScriptParser.CLBRACKET, 0); }
		public TableDefContext tableDef() {
			return GetRuleContext<TableDefContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(BabyScriptParser.NOT, 0); }
		public ITerminalNode TYPEOF() { return GetToken(BabyScriptParser.TYPEOF, 0); }
		public ITerminalNode OPPAREN() { return GetToken(BabyScriptParser.OPPAREN, 0); }
		public ITerminalNode CLPAREN() { return GetToken(BabyScriptParser.CLPAREN, 0); }
		public ITerminalNode SIN() { return GetToken(BabyScriptParser.SIN, 0); }
		public ITerminalNode COS() { return GetToken(BabyScriptParser.COS, 0); }
		public ITerminalNode SQRT() { return GetToken(BabyScriptParser.SQRT, 0); }
		public LookupChainContext lookupChain() {
			return GetRuleContext<LookupChainContext>(0);
		}
		public ITerminalNode AT() { return GetToken(BabyScriptParser.AT, 0); }
		public ITerminalNode TIMES() { return GetToken(BabyScriptParser.TIMES, 0); }
		public ITerminalNode DIVIDE() { return GetToken(BabyScriptParser.DIVIDE, 0); }
		public ITerminalNode MODULO() { return GetToken(BabyScriptParser.MODULO, 0); }
		public ITerminalNode HAT() { return GetToken(BabyScriptParser.HAT, 0); }
		public ITerminalNode LT() { return GetToken(BabyScriptParser.LT, 0); }
		public ITerminalNode LT2() { return GetToken(BabyScriptParser.LT2, 0); }
		public ITerminalNode LE() { return GetToken(BabyScriptParser.LE, 0); }
		public ITerminalNode LE2() { return GetToken(BabyScriptParser.LE2, 0); }
		public ITerminalNode GT() { return GetToken(BabyScriptParser.GT, 0); }
		public ITerminalNode GT2() { return GetToken(BabyScriptParser.GT2, 0); }
		public ITerminalNode GE() { return GetToken(BabyScriptParser.GE, 0); }
		public ITerminalNode GE2() { return GetToken(BabyScriptParser.GE2, 0); }
		public ITerminalNode EQUAL() { return GetToken(BabyScriptParser.EQUAL, 0); }
		public ITerminalNode NEQUAL() { return GetToken(BabyScriptParser.NEQUAL, 0); }
		public ITerminalNode AND() { return GetToken(BabyScriptParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(BabyScriptParser.OR, 0); }
		public ITerminalNode QUESTIONMARK() { return GetToken(BabyScriptParser.QUESTIONMARK, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 36; Match(IF);
				State = 37; expr(0);
				State = 38; Match(THEN);
				State = 39; expr(0);
				State = 42;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 40; Match(ELSE);
					State = 41; expr(0);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 44; Match(PLUS);
				State = 45; expr(21);
				}
				break;
			case 3:
				{
				State = 46; Match(MINUS);
				State = 47; expr(20);
				}
				break;
			case 4:
				{
				State = 48; Match(TABLE);
				State = 49; Match(OPBRACKET);
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPBRACE || _la==ID) {
					{
					State = 50; tableDef();
					}
				}

				State = 53; Match(CLBRACKET);
				}
				break;
			case 5:
				{
				State = 54;
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==TYPEOF) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 55; expr(18);
				}
				break;
			case 6:
				{
				State = 56;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SIN) | (1L << COS) | (1L << SQRT))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 57; Match(OPPAREN);
				State = 58; expr(0);
				State = 59; Match(CLPAREN);
				}
				break;
			case 7:
				{
				State = 62;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 61; Match(AT);
					}
					break;
				}
				State = 64; lookupChain();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 113;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 111;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 67;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 68; Match(TIMES);
						State = 69; expr(17);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 70;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 71; Match(DIVIDE);
						State = 72; expr(16);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 73;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 74; Match(MODULO);
						State = 75; expr(15);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 76;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 77; Match(PLUS);
						State = 78; expr(14);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 79;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 80; Match(MINUS);
						State = 81; expr(13);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 82;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 83; Match(HAT);
						State = 84; expr(12);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 85;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 86;
						_la = TokenStream.LA(1);
						if ( !(_la==LT || _la==LT2) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 87; expr(11);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 88;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 89;
						_la = TokenStream.LA(1);
						if ( !(_la==LE || _la==LE2) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 90; expr(10);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 91;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 92;
						_la = TokenStream.LA(1);
						if ( !(_la==GT || _la==GT2) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 93; expr(9);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 94;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 95;
						_la = TokenStream.LA(1);
						if ( !(_la==GE || _la==GE2) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 96; expr(8);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 97;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 98; Match(EQUAL);
						State = 99; expr(7);
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 100;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 101; Match(NEQUAL);
						State = 102; expr(6);
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 103;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 104; Match(AND);
						State = 105; expr(5);
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 106;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 107; Match(OR);
						State = 108; expr(4);
						}
						break;
					case 15:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 109;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 110; Match(QUESTIONMARK);
						}
						break;
					}
					} 
				}
				State = 115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprEofContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(BabyScriptParser.Eof, 0); }
		public ExprEofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprEof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterExprEof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitExprEof(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprEof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprEofContext exprEof() {
		ExprEofContext _localctx = new ExprEofContext(Context, State);
		EnterRule(_localctx, 4, RULE_exprEof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; expr(0);
			State = 117; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableDefContext : ParserRuleContext {
		public TableRowDefContext[] tableRowDef() {
			return GetRuleContexts<TableRowDefContext>();
		}
		public TableRowDefContext tableRowDef(int i) {
			return GetRuleContext<TableRowDefContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BabyScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BabyScriptParser.COMMA, i);
		}
		public TableDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterTableDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitTableDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableDefContext tableDef() {
		TableDefContext _localctx = new TableDefContext(Context, State);
		EnterRule(_localctx, 6, RULE_tableDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; tableRowDef();
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 120; Match(COMMA);
				State = 121; tableRowDef();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRowDefContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(BabyScriptParser.EQUALS, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ID() { return GetToken(BabyScriptParser.ID, 0); }
		public ITerminalNode OPBRACE() { return GetToken(BabyScriptParser.OPBRACE, 0); }
		public ITerminalNode CLBRACE() { return GetToken(BabyScriptParser.CLBRACE, 0); }
		public TableRowDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRowDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterTableRowDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitTableRowDef(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRowDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowDefContext tableRowDef() {
		TableRowDefContext _localctx = new TableRowDefContext(Context, State);
		EnterRule(_localctx, 8, RULE_tableRowDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 127; Match(ID);
				}
				break;
			case OPBRACE:
				{
				State = 128; Match(OPBRACE);
				State = 129; expr(0);
				State = 130; Match(CLBRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 134; Match(EQUALS);
			State = 135; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SquareListContext : ParserRuleContext {
		public ITerminalNode OPBRACKET() { return GetToken(BabyScriptParser.OPBRACKET, 0); }
		public ITerminalNode CLBRACKET() { return GetToken(BabyScriptParser.CLBRACKET, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BabyScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BabyScriptParser.COMMA, i);
		}
		public SquareListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squareList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterSquareList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitSquareList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSquareList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SquareListContext squareList() {
		SquareListContext _localctx = new SquareListContext(Context, State);
		EnterRule(_localctx, 10, RULE_squareList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(OPBRACKET);
			State = 146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 138; expr(0);
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 139; Match(COMMA);
					State = 140; expr(0);
					}
					}
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 148; Match(CLBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceListContext : ParserRuleContext {
		public ITerminalNode OPBRACE() { return GetToken(BabyScriptParser.OPBRACE, 0); }
		public ITerminalNode CLBRACE() { return GetToken(BabyScriptParser.CLBRACE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BabyScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BabyScriptParser.COMMA, i);
		}
		public BraceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterBraceList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitBraceList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBraceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BraceListContext braceList() {
		BraceListContext _localctx = new BraceListContext(Context, State);
		EnterRule(_localctx, 12, RULE_braceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(OPBRACE);
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 151; expr(0);
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 152; Match(COMMA);
					State = 153; expr(0);
					}
					}
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 161; Match(CLBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(BabyScriptParser.NUMBER, 0); }
		public ITerminalNode SINGLE_QUOTE_STRING() { return GetToken(BabyScriptParser.SINGLE_QUOTE_STRING, 0); }
		public SquareListContext squareList() {
			return GetRuleContext<SquareListContext>(0);
		}
		public BraceListContext braceList() {
			return GetRuleContext<BraceListContext>(0);
		}
		public ITerminalNode OPPAREN() { return GetToken(BabyScriptParser.OPPAREN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLPAREN() { return GetToken(BabyScriptParser.CLPAREN, 0); }
		public ITerminalNode UNITCAST() { return GetToken(BabyScriptParser.UNITCAST, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 14, RULE_atom);
		try {
			State = 175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163; Match(NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; Match(SINGLE_QUOTE_STRING);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165; squareList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 166; braceList();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 167; Match(OPPAREN);
				State = 168; expr(0);
				State = 169; Match(CLPAREN);
				State = 171;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 170; Match(UNITCAST);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 173;
				if (!(BabyScriptCompiler.IdRegex.Match(CurrentToken.Text).Success)) throw new FailedPredicateException(this, "BabyScriptCompiler.IdRegex.Match(CurrentToken.Text).Success");
				State = 174;
				MatchWildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementNameContext : ParserRuleContext {
		public ElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterElementName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitElementName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementNameContext elementName() {
		ElementNameContext _localctx = new ElementNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_elementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			if (!(BabyScriptCompiler.IdRegex.Match(CurrentToken.Text).Success)) throw new FailedPredicateException(this, "BabyScriptCompiler.IdRegex.Match(CurrentToken.Text).Success");
			State = 178;
			MatchWildcard();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeContext : ParserRuleContext {
		public NodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node; } }
	 
		public NodeContext() { }
		public virtual void CopyFrom(NodeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubtractionAssignContext : NodeContext {
		public LookupChainContext leftHand;
		public ExprContext rightHand;
		public ITerminalNode MINUSEQUALS() { return GetToken(BabyScriptParser.MINUSEQUALS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(BabyScriptParser.SEMICOLON, 0); }
		public LookupChainContext lookupChain() {
			return GetRuleContext<LookupChainContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SubtractionAssignContext(NodeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterSubtractionAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitSubtractionAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractionAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteContext : NodeContext {
		public LookupChainContext leftHand;
		public ITerminalNode DELETE() { return GetToken(BabyScriptParser.DELETE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(BabyScriptParser.SEMICOLON, 0); }
		public LookupChainContext lookupChain() {
			return GetRuleContext<LookupChainContext>(0);
		}
		public DeleteContext(NodeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterDelete(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitDelete(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockCommentContext : NodeContext {
		public IToken commentText;
		public ITerminalNode BLOCK_COMMENT() { return GetToken(BabyScriptParser.BLOCK_COMMENT, 0); }
		public BlockCommentContext(NodeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterBlockComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitBlockComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecrementContext : NodeContext {
		public LookupChainContext leftHand;
		public ITerminalNode MINUSMINUS() { return GetToken(BabyScriptParser.MINUSMINUS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(BabyScriptParser.SEMICOLON, 0); }
		public LookupChainContext lookupChain() {
			return GetRuleContext<LookupChainContext>(0);
		}
		public DecrementContext(NodeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterDecrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitDecrement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionAssignContext : NodeContext {
		public LookupChainContext leftHand;
		public ExprContext rightHand;
		public ITerminalNode PLUSEQUALS() { return GetToken(BabyScriptParser.PLUSEQUALS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(BabyScriptParser.SEMICOLON, 0); }
		public LookupChainContext lookupChain() {
			return GetRuleContext<LookupChainContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AdditionAssignContext(NodeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterAdditionAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitAdditionAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementContext : NodeContext {
		public ElementNameContext eleName;
		public ElementAttributesContext elementAttributes() {
			return GetRuleContext<ElementAttributesContext>(0);
		}
		public ElementChildrenContext elementChildren() {
			return GetRuleContext<ElementChildrenContext>(0);
		}
		public ElementNameContext elementName() {
			return GetRuleContext<ElementNameContext>(0);
		}
		public ElementContext(NodeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementContext : NodeContext {
		public LookupChainContext leftHand;
		public ITerminalNode PLUSPLUS() { return GetToken(BabyScriptParser.PLUSPLUS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(BabyScriptParser.SEMICOLON, 0); }
		public LookupChainContext lookupChain() {
			return GetRuleContext<LookupChainContext>(0);
		}
		public IncrementContext(NodeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterIncrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitIncrement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignContext : NodeContext {
		public LookupChainContext leftHand;
		public ExprContext rightHand;
		public ITerminalNode EQUALS() { return GetToken(BabyScriptParser.EQUALS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(BabyScriptParser.SEMICOLON, 0); }
		public LookupChainContext lookupChain() {
			return GetRuleContext<LookupChainContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignContext(NodeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TextContext : NodeContext {
		public IToken textValue;
		public ITerminalNode SEMICOLON() { return GetToken(BabyScriptParser.SEMICOLON, 0); }
		public ITerminalNode DOUBLE_QUOTE_STRING() { return GetToken(BabyScriptParser.DOUBLE_QUOTE_STRING, 0); }
		public TextContext(NodeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SlashCommentContext : NodeContext {
		public IToken commentText;
		public ITerminalNode SLASH_COMMENT() { return GetToken(BabyScriptParser.SLASH_COMMENT, 0); }
		public SlashCommentContext(NodeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterSlashComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitSlashComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlashComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NodeContext node() {
		NodeContext _localctx = new NodeContext(Context, State);
		EnterRule(_localctx, 18, RULE_node);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new ElementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 180; ((ElementContext)_localctx).eleName = elementName();
				State = 181; elementAttributes();
				State = 182; elementChildren();
				}
				break;
			case 2:
				_localctx = new AssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 184; ((AssignContext)_localctx).leftHand = lookupChain();
				State = 185; Match(EQUALS);
				State = 186; ((AssignContext)_localctx).rightHand = expr(0);
				State = 187; Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new IncrementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 189; ((IncrementContext)_localctx).leftHand = lookupChain();
				State = 190; Match(PLUSPLUS);
				State = 191; Match(SEMICOLON);
				}
				break;
			case 4:
				_localctx = new DecrementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 193; ((DecrementContext)_localctx).leftHand = lookupChain();
				State = 194; Match(MINUSMINUS);
				State = 195; Match(SEMICOLON);
				}
				break;
			case 5:
				_localctx = new AdditionAssignContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 197; ((AdditionAssignContext)_localctx).leftHand = lookupChain();
				State = 198; Match(PLUSEQUALS);
				State = 199; ((AdditionAssignContext)_localctx).rightHand = expr(0);
				State = 200; Match(SEMICOLON);
				}
				break;
			case 6:
				_localctx = new SubtractionAssignContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 202; ((SubtractionAssignContext)_localctx).leftHand = lookupChain();
				State = 203; Match(MINUSEQUALS);
				State = 204; ((SubtractionAssignContext)_localctx).rightHand = expr(0);
				State = 205; Match(SEMICOLON);
				}
				break;
			case 7:
				_localctx = new DeleteContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 207; Match(DELETE);
				State = 208; ((DeleteContext)_localctx).leftHand = lookupChain();
				State = 209; Match(SEMICOLON);
				}
				break;
			case 8:
				_localctx = new TextContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 211; ((TextContext)_localctx).textValue = Match(DOUBLE_QUOTE_STRING);
				State = 212; Match(SEMICOLON);
				}
				break;
			case 9:
				_localctx = new BlockCommentContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 213; ((BlockCommentContext)_localctx).commentText = Match(BLOCK_COMMENT);
				}
				break;
			case 10:
				_localctx = new SlashCommentContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 214; ((SlashCommentContext)_localctx).commentText = Match(SLASH_COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementAttributesContext : ParserRuleContext {
		public AttributeContext _attribute;
		public IList<AttributeContext> _rawList = new List<AttributeContext>();
		public ITerminalNode OPPAREN() { return GetToken(BabyScriptParser.OPPAREN, 0); }
		public ITerminalNode CLPAREN() { return GetToken(BabyScriptParser.CLPAREN, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(BabyScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(BabyScriptParser.COMMA, i);
		}
		public ElementAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterElementAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitElementAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementAttributesContext elementAttributes() {
		ElementAttributesContext _localctx = new ElementAttributesContext(Context, State);
		EnterRule(_localctx, 20, RULE_elementAttributes);
		int _la;
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217; Match(OPPAREN);
				State = 226;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 218; _localctx._attribute = attribute();
					_localctx._rawList.Add(_localctx._attribute);
					State = 223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 219; Match(COMMA);
						State = 220; _localctx._attribute = attribute();
						_localctx._rawList.Add(_localctx._attribute);
						}
						}
						State = 225;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 228; Match(CLPAREN);
				}
				break;
			case OPBRACE:
			case SLASH_COMMENT:
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken attrName;
		public AttributeValueContext value;
		public ITerminalNode COLON() { return GetToken(BabyScriptParser.COLON, 0); }
		public AttributeValueContext attributeValue() {
			return GetRuleContext<AttributeValueContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 22, RULE_attribute);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232;
				if (!(BabyScriptCompiler.IdRegex.Match(CurrentToken.Text).Success)) throw new FailedPredicateException(this, "BabyScriptCompiler.IdRegex.Match(CurrentToken.Text).Success");
				State = 233;
				_localctx.attrName = MatchWildcard();
				State = 234; Match(COLON);
				State = 235; _localctx.value = attributeValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; _localctx.value = attributeValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeValueContext : ParserRuleContext {
		public ExprContext exprValue;
		public IToken exprLiteral;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode DOUBLE_QUOTE_STRING() { return GetToken(BabyScriptParser.DOUBLE_QUOTE_STRING, 0); }
		public AttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitAttributeValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeValueContext attributeValue() {
		AttributeValueContext _localctx = new AttributeValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_attributeValue);
		try {
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239; _localctx.exprValue = expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; _localctx.exprLiteral = Match(DOUBLE_QUOTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementChildrenContext : ParserRuleContext {
		public ElementChildrenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementChildren; } }
	 
		public ElementChildrenContext() { }
		public virtual void CopyFrom(ElementChildrenContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ElementChildrenBlockContext : ElementChildrenContext {
		public IToken inlineComment;
		public IToken blockBegin;
		public NodeContext _node;
		public IList<NodeContext> _rawList = new List<NodeContext>();
		public IToken blockEnd;
		public ITerminalNode OPBRACE() { return GetToken(BabyScriptParser.OPBRACE, 0); }
		public ITerminalNode CLBRACE() { return GetToken(BabyScriptParser.CLBRACE, 0); }
		public ITerminalNode SLASH_COMMENT() { return GetToken(BabyScriptParser.SLASH_COMMENT, 0); }
		public NodeContext[] node() {
			return GetRuleContexts<NodeContext>();
		}
		public NodeContext node(int i) {
			return GetRuleContext<NodeContext>(i);
		}
		public ElementChildrenBlockContext(ElementChildrenContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterElementChildrenBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitElementChildrenBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementChildrenBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ElementEmptyChildrenContext : ElementChildrenContext {
		public IToken inlineComment;
		public ITerminalNode SEMICOLON() { return GetToken(BabyScriptParser.SEMICOLON, 0); }
		public ITerminalNode SLASH_COMMENT() { return GetToken(BabyScriptParser.SLASH_COMMENT, 0); }
		public ElementEmptyChildrenContext(ElementChildrenContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterElementEmptyChildren(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitElementEmptyChildren(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementEmptyChildren(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementChildrenContext elementChildren() {
		ElementChildrenContext _localctx = new ElementChildrenContext(Context, State);
		EnterRule(_localctx, 26, RULE_elementChildren);
		int _la;
		try {
			int _alt;
			State = 258;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEMICOLON:
				_localctx = new ElementEmptyChildrenContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 243; Match(SEMICOLON);
				State = 245;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 244; ((ElementEmptyChildrenContext)_localctx).inlineComment = Match(SLASH_COMMENT);
					}
					break;
				}
				}
				break;
			case OPBRACE:
			case SLASH_COMMENT:
				_localctx = new ElementChildrenBlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SLASH_COMMENT) {
					{
					State = 247; ((ElementChildrenBlockContext)_localctx).inlineComment = Match(SLASH_COMMENT);
					}
				}

				State = 250; ((ElementChildrenBlockContext)_localctx).blockBegin = Match(OPBRACE);
				State = 254;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 251; ((ElementChildrenBlockContext)_localctx)._node = node();
						((ElementChildrenBlockContext)_localctx)._rawList.Add(((ElementChildrenBlockContext)_localctx)._node);
						}
						} 
					}
					State = 256;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				State = 257; ((ElementChildrenBlockContext)_localctx).blockEnd = Match(CLBRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LookupChainContext : ParserRuleContext {
		public AtomContext[] atom() {
			return GetRuleContexts<AtomContext>();
		}
		public AtomContext atom(int i) {
			return GetRuleContext<AtomContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(BabyScriptParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(BabyScriptParser.DOT, i);
		}
		public LookupChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lookupChain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.EnterLookupChain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IBabyScriptParserListener typedListener = listener as IBabyScriptParserListener;
			if (typedListener != null) typedListener.ExitLookupChain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBabyScriptParserVisitor<TResult> typedVisitor = visitor as IBabyScriptParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLookupChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LookupChainContext lookupChain() {
		LookupChainContext _localctx = new LookupChainContext(Context, State);
		EnterRule(_localctx, 28, RULE_lookupChain);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; atom();
			State = 265;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 261; Match(DOT);
					State = 262; atom();
					}
					} 
				}
				State = 267;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		case 7: return atom_sempred((AtomContext)_localctx, predIndex);
		case 8: return elementName_sempred((ElementNameContext)_localctx, predIndex);
		case 11: return attribute_sempred((AttributeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 16);
		case 1: return Precpred(Context, 15);
		case 2: return Precpred(Context, 14);
		case 3: return Precpred(Context, 13);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 11);
		case 6: return Precpred(Context, 10);
		case 7: return Precpred(Context, 9);
		case 8: return Precpred(Context, 8);
		case 9: return Precpred(Context, 7);
		case 10: return Precpred(Context, 6);
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 4);
		case 13: return Precpred(Context, 3);
		case 14: return Precpred(Context, 2);
		}
		return true;
	}
	private bool atom_sempred(AtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return BabyScriptCompiler.IdRegex.Match(CurrentToken.Text).Success;
		}
		return true;
	}
	private bool elementName_sempred(ElementNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return BabyScriptCompiler.IdRegex.Match(CurrentToken.Text).Success;
		}
		return true;
	}
	private bool attribute_sempred(AttributeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return BabyScriptCompiler.IdRegex.Match(CurrentToken.Text).Success;
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x38', '\x10F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x6', '\x2', '\"', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '#', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '-', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x36', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x41', '\n', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x44', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'r', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', 'u', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '}', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', '\x80', '\v', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x87', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x90', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '\x93', '\v', '\a', '\x5', '\a', '\x95', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', '\x9D', '\n', '\b', '\f', '\b', '\xE', '\b', '\xA0', 
		'\v', '\b', '\x5', '\b', '\xA2', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xAE', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\xB2', '\n', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xDA', '\n', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 
		'\xE0', '\n', '\f', '\f', '\f', '\xE', '\f', '\xE3', '\v', '\f', '\x5', 
		'\f', '\xE5', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xE9', 
		'\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xF0', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xF4', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\xF8', '\n', '\xF', '\x3', '\xF', '\x5', '\xF', '\xFB', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xFF', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', '\x102', '\v', '\xF', '\x3', '\xF', '\x5', '\xF', '\x105', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 
		'\x10A', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x10D', '\v', '\x10', 
		'\x3', '\x10', '\x2', '\x3', '\x4', '\x11', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', '\x2', '\b', '\x3', '\x2', ',', '-', '\x3', '\x2', '.', '\x30', 
		'\x3', '\x2', '\x18', '\x19', '\x3', '\x2', '\x1A', '\x1B', '\x3', '\x2', 
		'\x1C', '\x1D', '\x3', '\x2', '\x1E', '\x1F', '\x2', '\x137', '\x2', '!', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x6', 'v', '\x3', '\x2', '\x2', '\x2', '\b', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x86', '\x3', '\x2', '\x2', '\x2', '\f', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x98', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\x12', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x16', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x106', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\x5', 
		'\x14', '\v', '\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', 
		'\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', '#', 
		'$', '\x3', '\x2', '\x2', '\x2', '$', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'%', '&', '\b', '\x3', '\x1', '\x2', '&', '\'', '\a', '\x31', '\x2', '\x2', 
		'\'', '(', '\x5', '\x4', '\x3', '\x2', '(', ')', '\a', '\x32', '\x2', 
		'\x2', ')', ',', '\x5', '\x4', '\x3', '\x2', '*', '+', '\a', '\x33', '\x2', 
		'\x2', '+', '-', '\x5', '\x4', '\x3', '\x2', ',', '*', '\x3', '\x2', '\x2', 
		'\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\a', '\x13', '\x2', '\x2', '/', '\x44', '\x5', 
		'\x4', '\x3', '\x17', '\x30', '\x31', '\a', '\x14', '\x2', '\x2', '\x31', 
		'\x44', '\x5', '\x4', '\x3', '\x16', '\x32', '\x33', '\a', '\x34', '\x2', 
		'\x2', '\x33', '\x35', '\a', '\x5', '\x2', '\x2', '\x34', '\x36', '\x5', 
		'\b', '\x5', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x44', '\a', '\x6', '\x2', '\x2', '\x38', '\x39', '\t', 
		'\x2', '\x2', '\x2', '\x39', '\x44', '\x5', '\x4', '\x3', '\x14', ':', 
		';', '\t', '\x3', '\x2', '\x2', ';', '<', '\a', '\x3', '\x2', '\x2', '<', 
		'=', '\x5', '\x4', '\x3', '\x2', '=', '>', '\a', '\x4', '\x2', '\x2', 
		'>', '\x44', '\x3', '\x2', '\x2', '\x2', '?', '\x41', '\a', '(', '\x2', 
		'\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x44', 
		'\x5', '\x1E', '\x10', '\x2', '\x43', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '.', '\x3', '\x2', '\x2', '\x2', '\x43', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x32', '\x3', '\x2', '\x2', '\x2', '\x43', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x43', ':', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x44', 's', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\x46', '\f', '\x12', '\x2', '\x2', '\x46', 'G', '\a', '\x15', 
		'\x2', '\x2', 'G', 'r', '\x5', '\x4', '\x3', '\x13', 'H', 'I', '\f', '\x11', 
		'\x2', '\x2', 'I', 'J', '\a', '\x16', '\x2', '\x2', 'J', 'r', '\x5', '\x4', 
		'\x3', '\x12', 'K', 'L', '\f', '\x10', '\x2', '\x2', 'L', 'M', '\a', '\x17', 
		'\x2', '\x2', 'M', 'r', '\x5', '\x4', '\x3', '\x11', 'N', 'O', '\f', '\xF', 
		'\x2', '\x2', 'O', 'P', '\a', '\x13', '\x2', '\x2', 'P', 'r', '\x5', '\x4', 
		'\x3', '\x10', 'Q', 'R', '\f', '\xE', '\x2', '\x2', 'R', 'S', '\a', '\x14', 
		'\x2', '\x2', 'S', 'r', '\x5', '\x4', '\x3', '\xF', 'T', 'U', '\f', '\r', 
		'\x2', '\x2', 'U', 'V', '\a', ')', '\x2', '\x2', 'V', 'r', '\x5', '\x4', 
		'\x3', '\xE', 'W', 'X', '\f', '\f', '\x2', '\x2', 'X', 'Y', '\t', '\x4', 
		'\x2', '\x2', 'Y', 'r', '\x5', '\x4', '\x3', '\r', 'Z', '[', '\f', '\v', 
		'\x2', '\x2', '[', '\\', '\t', '\x5', '\x2', '\x2', '\\', 'r', '\x5', 
		'\x4', '\x3', '\f', ']', '^', '\f', '\n', '\x2', '\x2', '^', '_', '\t', 
		'\x6', '\x2', '\x2', '_', 'r', '\x5', '\x4', '\x3', '\v', '`', '\x61', 
		'\f', '\t', '\x2', '\x2', '\x61', '\x62', '\t', '\a', '\x2', '\x2', '\x62', 
		'r', '\x5', '\x4', '\x3', '\n', '\x63', '\x64', '\f', '\b', '\x2', '\x2', 
		'\x64', '\x65', '\a', ' ', '\x2', '\x2', '\x65', 'r', '\x5', '\x4', '\x3', 
		'\t', '\x66', 'g', '\f', '\a', '\x2', '\x2', 'g', 'h', '\a', '!', '\x2', 
		'\x2', 'h', 'r', '\x5', '\x4', '\x3', '\b', 'i', 'j', '\f', '\x6', '\x2', 
		'\x2', 'j', 'k', '\a', '\"', '\x2', '\x2', 'k', 'r', '\x5', '\x4', '\x3', 
		'\a', 'l', 'm', '\f', '\x5', '\x2', '\x2', 'm', 'n', '\a', '#', '\x2', 
		'\x2', 'n', 'r', '\x5', '\x4', '\x3', '\x6', 'o', 'p', '\f', '\x4', '\x2', 
		'\x2', 'p', 'r', '\a', '\'', '\x2', '\x2', 'q', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'H', '\x3', '\x2', '\x2', '\x2', 'q', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'N', '\x3', '\x2', '\x2', '\x2', 'q', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'T', '\x3', '\x2', '\x2', '\x2', 'q', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'Z', '\x3', '\x2', '\x2', '\x2', 'q', ']', '\x3', '\x2', 
		'\x2', '\x2', 'q', '`', '\x3', '\x2', '\x2', '\x2', 'q', '\x63', '\x3', 
		'\x2', '\x2', '\x2', 'q', '\x66', '\x3', '\x2', '\x2', '\x2', 'q', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'q', 'l', '\x3', '\x2', '\x2', '\x2', 'q', 
		'o', '\x3', '\x2', '\x2', '\x2', 'r', 'u', '\x3', '\x2', '\x2', '\x2', 
		's', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', '\x5', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\x5', '\x4', '\x3', '\x2', 'w', 'x', '\a', '\x2', '\x2', 
		'\x3', 'x', '\a', '\x3', '\x2', '\x2', '\x2', 'y', '~', '\x5', '\n', '\x6', 
		'\x2', 'z', '{', '\a', '%', '\x2', '\x2', '{', '}', '\x5', '\n', '\x6', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\t', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x81', '\x87', '\a', '\x36', '\x2', 
		'\x2', '\x82', '\x83', '\a', '\a', '\x2', '\x2', '\x83', '\x84', '\x5', 
		'\x4', '\x3', '\x2', '\x84', '\x85', '\a', '\b', '\x2', '\x2', '\x85', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x86', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x82', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\x11', '\x2', '\x2', '\x89', 
		'\x8A', '\x5', '\x4', '\x3', '\x2', '\x8A', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x94', '\a', '\x5', '\x2', '\x2', '\x8C', '\x91', '\x5', 
		'\x4', '\x3', '\x2', '\x8D', '\x8E', '\a', '%', '\x2', '\x2', '\x8E', 
		'\x90', '\x5', '\x4', '\x3', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x93', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x97', '\a', '\x6', '\x2', '\x2', '\x97', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\xA1', '\a', '\a', '\x2', '\x2', '\x99', '\x9E', '\x5', 
		'\x4', '\x3', '\x2', '\x9A', '\x9B', '\a', '%', '\x2', '\x2', '\x9B', 
		'\x9D', '\x5', '\x4', '\x3', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\x99', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA4', '\a', '\b', '\x2', '\x2', '\xA4', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xB2', '\a', '*', '\x2', '\x2', '\xA6', '\xB2', '\a', 
		'\x38', '\x2', '\x2', '\xA7', '\xB2', '\x5', '\f', '\a', '\x2', '\xA8', 
		'\xB2', '\x5', '\xE', '\b', '\x2', '\xA9', '\xAA', '\a', '\x3', '\x2', 
		'\x2', '\xAA', '\xAB', '\x5', '\x4', '\x3', '\x2', '\xAB', '\xAD', '\a', 
		'\x4', '\x2', '\x2', '\xAC', '\xAE', '\a', '+', '\x2', '\x2', '\xAD', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x6', 
		'\t', '\x11', '\x2', '\xB0', '\xB2', '\v', '\x2', '\x2', '\x2', '\xB1', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB4', '\x6', '\n', '\x12', '\x2', '\xB4', '\xB5', '\v', 
		'\x2', '\x2', '\x2', '\xB5', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\x5', '\x12', '\n', '\x2', '\xB7', '\xB8', '\x5', '\x16', '\f', 
		'\x2', '\xB8', '\xB9', '\x5', '\x1C', '\xF', '\x2', '\xB9', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBB', '\x5', '\x1E', '\x10', '\x2', '\xBB', 
		'\xBC', '\a', '\x11', '\x2', '\x2', '\xBC', '\xBD', '\x5', '\x4', '\x3', 
		'\x2', '\xBD', '\xBE', '\a', '\x12', '\x2', '\x2', '\xBE', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\xC0', '\x5', '\x1E', '\x10', '\x2', '\xC0', 
		'\xC1', '\a', '\r', '\x2', '\x2', '\xC1', '\xC2', '\a', '\x12', '\x2', 
		'\x2', '\xC2', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x5', 
		'\x1E', '\x10', '\x2', '\xC4', '\xC5', '\a', '\xE', '\x2', '\x2', '\xC5', 
		'\xC6', '\a', '\x12', '\x2', '\x2', '\xC6', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xC8', '\x5', '\x1E', '\x10', '\x2', '\xC8', '\xC9', '\a', 
		'\xF', '\x2', '\x2', '\xC9', '\xCA', '\x5', '\x4', '\x3', '\x2', '\xCA', 
		'\xCB', '\a', '\x12', '\x2', '\x2', '\xCB', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xCD', '\x5', '\x1E', '\x10', '\x2', '\xCD', '\xCE', '\a', 
		'\x10', '\x2', '\x2', '\xCE', '\xCF', '\x5', '\x4', '\x3', '\x2', '\xCF', 
		'\xD0', '\a', '\x12', '\x2', '\x2', '\xD0', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xD2', '\a', '\x35', '\x2', '\x2', '\xD2', '\xD3', '\x5', 
		'\x1E', '\x10', '\x2', '\xD3', '\xD4', '\a', '\x12', '\x2', '\x2', '\xD4', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x37', '\x2', 
		'\x2', '\xD6', '\xDA', '\a', '\x12', '\x2', '\x2', '\xD7', '\xDA', '\a', 
		'\t', '\x2', '\x2', '\xD8', '\xDA', '\a', '\n', '\x2', '\x2', '\xD9', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xE4', '\a', '\x3', '\x2', 
		'\x2', '\xDC', '\xE1', '\x5', '\x18', '\r', '\x2', '\xDD', '\xDE', '\a', 
		'%', '\x2', '\x2', '\xDE', '\xE0', '\x5', '\x18', '\r', '\x2', '\xDF', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE9', '\a', '\x4', '\x2', '\x2', '\xE7', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xEB', '\x6', '\r', '\x13', '\x2', '\xEB', 
		'\xEC', '\v', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', '$', '\x2', '\x2', 
		'\xED', '\xF0', '\x5', '\x1A', '\xE', '\x2', '\xEE', '\xF0', '\x5', '\x1A', 
		'\xE', '\x2', '\xEF', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xF4', '\x5', '\x4', '\x3', '\x2', '\xF2', '\xF4', '\a', '\x37', 
		'\x2', '\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF2', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF7', '\a', '\x12', '\x2', '\x2', '\xF6', '\xF8', '\a', '\n', 
		'\x2', '\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xFB', '\a', '\n', '\x2', '\x2', '\xFA', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\x100', '\a', '\a', '\x2', '\x2', 
		'\xFD', '\xFF', '\x5', '\x14', '\v', '\x2', '\xFE', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\x102', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\x103', '\x3', '\x2', '\x2', '\x2', '\x102', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x105', '\a', '\b', '\x2', '\x2', '\x104', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\x104', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x106', '\x10B', 
		'\x5', '\x10', '\t', '\x2', '\x107', '\x108', '\a', '&', '\x2', '\x2', 
		'\x108', '\x10A', '\x5', '\x10', '\t', '\x2', '\x109', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '#', ',', '\x35', '@', '\x43', 'q', 
		's', '~', '\x86', '\x91', '\x94', '\x9E', '\xA1', '\xAD', '\xB1', '\xD9', 
		'\xE1', '\xE4', '\xE8', '\xEF', '\xF3', '\xF7', '\xFA', '\x100', '\x104', 
		'\x10B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace XBabyScript.Compile
